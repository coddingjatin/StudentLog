import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.FileWriter;   // Import the FileWriter class
import java.io.IOException;  // Import the IOException class to handle errors
import static javax.swing.JOptionPane.showMessageDialog;

class Student {
	public String name, studentID, courseID, totalScore;
	public Student(String name, String studentID, String courseID, String totalScore) {
		this.name = name;
		this.studentID = studentID;
		this.courseID = courseID;
		this.totalScore = totalScore;
	}
	public String toString() {
		return name + "\t"+ studentID +"\t"+ courseID + "\t" + totalScore + "\n";
	}
}

public class App extends javax.swing.JFrame {
	
	//LinkedList that contains a copy of records in the database file to make searching, deleting and sorting easier.
	private List<Student> studentList = new LinkedList<Student>();
	
	//declaration of reference variables that will later point to the database.txt file
	private File myFile;
	private FileWriter myWriter;
	PrintWriter clearer;
	
	//This boolean attribute will represent the result of the search and delete record operations
	private boolean found;
	
	//This String contains the content of the database.txt file
	private String fileContent;
	
    /**
     * Creates new form App
     */
    public App() {
    	setTitle("Student Record Keeping App");
        initComponents(); //initialize the components
        
        //create the database.txt file by initializing the myWriter and myFile variables
        try {
        	//create the database.txt file using the File class
        	myFile = new File("database.txt");
        	//create an instance of the FileWriter class which will later be used to write to the file
   		 	myWriter = new FileWriter("database.txt", true);
        } catch (IOException e) {
        	System.out.println("An IOException occurred when creating the file. " + e.getMessage());
        };
       
    }
    
    //This method will make sure that none of the input fields are empty when adding a new record
    public boolean isFilled() {
    	return nameField.getText().equals("") || studentIDField.getText().equals("") || courseIDField.getText().equals("") 
    			|| totalScoreField.getText().equals("") ? false : true;
    }
    
    //This method will remove everything after the whitespace in a string
    public String trim(String str) {
    	String trimmed = "";
    	for(int i = 0; i < str.length(); i++) {
    		if((str.charAt(i) + "").equals(" "))
    			break;
    		trimmed += str.charAt(i);	
    	}
    	return trimmed;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">   
    
    //this method initializes all the components
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        studentIDField = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        courseIDField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        totalScoreField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton1.addActionListener(new AllButtonsListener());
        jButton2 = new javax.swing.JButton();
        jButton2.addActionListener(new AllButtonsListener());
        jButton3 = new javax.swing.JButton();
        jButton3.addActionListener(new AllButtonsListener());
        jButton4 = new javax.swing.JButton();
        jButton4.addActionListener(new AllButtonsListener());
        jButton5 = new javax.swing.JButton();
        jButton5.addActionListener(new AllButtonsListener());
        jButton6 = new javax.swing.JButton();
        jButton6.addActionListener(new AllButtonsListener());
        jScrollPane2 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        jButton7 = new javax.swing.JButton();
        jButton7.addActionListener(new AllButtonsListener());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Student ID");

        jLabel3.setText("Name");

        studentIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Course ID");

        courseIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Total Score");

        totalScoreField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton1.setText("Add New Record");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Search records using Student ID");

        jButton3.setText("Search records using Course ID");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Display records");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Sort & Display");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Delete a record using Student ID");

        display.setColumns(20);
        display.setRows(5);
        jScrollPane2.setViewportView(display);

        jButton7.setText("Delete all");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(27, 27, 27)
                                .addComponent(studentIDField))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(58, 58, 58)
                                .addComponent(nameField))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(courseIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                .addComponent(totalScoreField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(studentIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(courseIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(totalScoreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton7))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
         
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
    }                                        

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea display;
    private javax.swing.JTextField studentIDField;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField courseIDField;
    private javax.swing.JTextField totalScoreField;
    // End of variables declaration   
    
	private class AllButtonsListener implements ActionListener {
	      @Override
	      public void actionPerformed(ActionEvent evt) {
	         // Need to determine which button fired the event.
	         // the getActionCommand() returns the Button's label
	         String btnLabel = evt.getActionCommand();
	         if (btnLabel.equals("Add New Record")) {
	        	 //make sure the user fills in all  the input fields
	        	 if(isFilled() == false) {
	        		 showMessageDialog(null, "Please make sure you fill in all the input fields!"); 
	        	 } else {
	 	             //append the labels to the TextArea if the TextArea is empty
	        		 if(display.getText() == "")
	        			 display.append("Name" + "             " + "Student ID" + "        " 
	        					 + "Course ID" + "     " + "Total Score" + "\n");

	        		 //Write the record to the file
	        		 try {
	        		  myWriter.write(trim(nameField.getText())+"\t"+studentIDField.getText()+
	        				  "\t"+courseIDField.getText()+"\t"+totalScoreField.getText()+"\n");
	        		     
	        		  myWriter.flush();
	        		 } catch(IOException e) {
	        			 System.out.println("An error occurred when writing to the file. " + e.getMessage());
	        		 }
	        		 
	        		 //Read the record from the file and append it to the TextArea
	        		 try {
						Scanner myReader = new Scanner(myFile);
						
						fileContent = ""; //clear the fileContent
						display.setText(""); //clear the display
						
						//append the labels to the display
						display.append("Name" + "             " + "Student ID" + "        " 
	        					 + "Course ID" + "     " + "Total Score" + "\n");
						
						while (myReader.hasNextLine()) {
							fileContent += myReader.nextLine() + "\n";
						}
						//append the fileContent to the display
						display.append(fileContent);
						myReader.close();
					} catch (FileNotFoundException e) {
						System.out.println("An FileNotFound Exception occurred when creating the file. " + e.getMessage());
					}
	        	 }

	         } else if (btnLabel.equals("Delete all")) {
	        	 //clear the TextArea
	        	 display.setText("");
	        	//create an instance of the PrintWriter class which will later be used to clear the contents of the file
	        	 try {
					clearer = new PrintWriter("database.txt");
				} catch (FileNotFoundException e) {
					System.out.println("An FileNotFound Exception occurred when creating the file. " + e.getMessage());
				}
	        	 clearer.print("");
			     clearer.close();
	         } 
	         else if (btnLabel.equals("Display records")) {
	        	//Read the record from the file and append it to the TextArea
        		 try {
					Scanner myReader = new Scanner(myFile);
					
					fileContent = ""; //clear the fileContent
					display.setText(""); //clear the display
					
					//append the labels to the display
					display.append("Name" + "             " + "Student ID" + "        " 
        					 + "Course ID" + "     " + "Total Score" + "\n");
					
					while (myReader.hasNextLine()) {
						fileContent += myReader.nextLine() + "\n";
					}
					//append the fileContent to the display
					display.append(fileContent);
					myReader.close();
				} catch (FileNotFoundException e) {
					System.out.println("An FileNotFound Exception occurred when creating the file. " + e.getMessage());
				}
	         } 
	         else if(btnLabel.equals("Sort & Display")) {
	        	 	
	        	 if(myFile.length() == 0) {
	        		 showMessageDialog(null, "Database is empty. There are no records to sort");
	        	 } else {
	        		 
	        		 try {
		        		 	
							Scanner myReader = new Scanner(myFile);
							
							fileContent = ""; //clear the fileContent
							display.setText(""); //clear the display
							studentList.clear(); //clear the studentList
							
							//append the labels to the display
							display.append("Name" + "             " + "Student ID" + "        " 
		        					 + "Course ID" + "     " + "Total Score" + "\n");
		
							while (myReader.hasNextLine()) {
								//read each line and split it into parts using whitespace as a separator
								String data = myReader.nextLine();
								String[] pieces = data.split("\\s+");
								//add each piece to a new instance of the Student class and add then add it to the studentList
								studentList.add(new Student(pieces[0] , pieces[1], pieces[2], pieces[3]));
							}
							//Sort the studentList using the Collections and COmparator classes
							Collections.sort(studentList, new Comparator<Student>() {
							    @Override
							    public 	final int compare(Student s1, Student s2) {
							        return Integer.parseInt(s2.totalScore) - Integer.parseInt(s1.totalScore);
							    }
							});
							//add the sorted records to the fileContent string
							studentList.forEach((e) -> {
								fileContent += e.toString();
							});
							//append the fileContent to the display
							display.append(fileContent);
							myReader.close();
						} catch (FileNotFoundException e) {
							System.out.println("An FileNotFound Exception occurred when creating the file. " + e.getMessage());
						}
	        		 
	        	 }
	        	 
	         }
	         else if(btnLabel.equals("Search records using Course ID")) {
	        	 //make sure the courseID field isn't empty
	        	 if(courseIDField.getText().equals("")) {
						showMessageDialog(null, "Please fill in the Course ID input	box before searching!");
					} else {
						
						//clear the other input fields
						nameField.setText("");
						studentIDField.setText("");
						totalScoreField.setText("");
						
						try {
							Scanner myReader = new Scanner(myFile);
							
							fileContent = ""; //clear the fileContent
							display.setText(""); //clear the display
							studentList.clear(); //clear the studentList
							
							//append the labels to the display
							display.append("Name" + "             " + "Student ID" + "        " 
		        					 + "Course ID" + "     " + "Total Score" + "\n");
		
							while (myReader.hasNextLine()) {
								//read each line and split it into parts using whitespace as a separator
								String data = myReader.nextLine();
								String[] pieces = data.split("\\s+");
								//add each piece to a new instance of the Student class and add then add it to the studentList
								studentList.add(new Student(pieces[0] , pieces[1], pieces[2], pieces[3]));
							}
							
							//search for the record	using course ID and if found add it to the fileContent string
							found = false;
							studentList.forEach((e) -> {
								if(courseIDField.getText().equals(e.courseID)) {
									fileContent += e.toString();
									found = true;
								}
							});
							
							//append the fileContent to the display if record was found
							if(found == true) {
								display.append(fileContent);
							} else {
								showMessageDialog(null, "Record doesn't exist!");
							}
							myReader.close();
							
						} catch (FileNotFoundException e) {
							System.out.println("A FileNotFound Exception occurred when creating the file. " + e.getMessage());
						}
						
					}
	        	 
	         }
	         else if(btnLabel.equals("Search records using Student ID")) {
	        	 
	        	//make sure the courseID field isn't empty
	        	 if(studentIDField.getText().equals("")) {
						showMessageDialog(null, "Please fill in the Student	ID input box before searching!");
					} else {
						
						//clear the other input fields
						nameField.setText("");
						courseIDField.setText("");
						totalScoreField.setText("");
						
						try {
							Scanner myReader = new Scanner(myFile);
							
							fileContent = ""; //clear the fileContent
							display.setText(""); //clear the display
							studentList.clear(); //clear the studentList
							
							//append the labels to the display
							display.append("Name" + "             " + "Student ID" + "        " 
		        					 + "Course ID" + "     " + "Total Score" + "\n");
		
							while (myReader.hasNextLine()) {
								//read each line and split it into parts using whitespace as a separator
								String data = myReader.nextLine();
								String[] pieces = data.split("\\s+");
								//add each piece to a new instance of the Student class and add then add it to the studentList
								studentList.add(new Student(pieces[0] , pieces[1], pieces[2], pieces[3]));
							}
							
							//Search for the record using Student ID and if found add it to the fileContent string
							found = false;
							studentList.forEach((e) -> {
								if(studentIDField.getText().equals(e.studentID)) {
									fileContent += e.toString();
									found = true;
								}
							});
							
							//append the fileContent to the display if record is found
							if (found == true) {
								display.append(fileContent);
							} else {
								 showMessageDialog(null, "Record doesn't exist!");
							}
							myReader.close();

						} catch (FileNotFoundException e) {
							System.out.println("An FileNotFound Exception occurred when creating the file. " + e.getMessage());
						}
						
					}
	        	 
	         } 
	         else {
	        	 
	        	//make sure the courseID field isn't empty
	        	 if(studentIDField.getText().equals("")) {
						showMessageDialog(null, "Please fill in the Student	ID input box before trying to delete");
					} else {
						
						//clear the other input fields
						nameField.setText("");
						courseIDField.setText("");
						totalScoreField.setText("");
						
						
						try {
							Scanner myReader = new Scanner(myFile);
							
							fileContent = ""; //clear the fileContent
							display.setText(""); //clear the display
							studentList.clear(); //clear the studentList
							
							//append the labels to the display
							display.append("Name" + "             " + "Student ID" + "        " 
		        					 + "Course ID" + "     " + "Total Score" + "\n");
							
							while (myReader.hasNextLine()) {
								//read each line and split it into parts using whitespace as a separator
								String data = myReader.nextLine();
								String[] pieces = data.split("\\s+");
								//add each piece to a new instance of the Student class and add then add it to the studentList
								studentList.add(new Student(pieces[0] , pieces[1], pieces[2], pieces[3]));
							}
							
							//search for the record using student ID and add all the other records to fileContent string
							studentList.forEach((e) -> {
								if(studentIDField.getText().equals(e.studentID)) {
									found = true;
								} else {
									if(!studentIDField.getText().equals(e.studentID))
									fileContent += e.toString();
									found = false;
								}
								
							});
							//append the fileContent to the display
							display.append(fileContent);
							myReader.close();
							
							//clear the database.txt file and add the updated records without the record that was just
							//removed
							try {
								clearer = new PrintWriter("database.txt");
							} catch (FileNotFoundException e) {
								System.out.println("A FileNotFound Exception occurred when creating the file. " + e.getMessage());
							}
				        	 clearer.print("");
						     clearer.close();
						     
						     //inform the user that the record has been found and successfully deleted
						     if(found == true) {
						    	 showMessageDialog(null, "Record has been successfully deleted");
						     } else {
						    	 showMessageDialog(null, "Record doesn't exist!");
						     }
						     
						     //write the updated fileContent string to the database.txt file
						     try {
						    	  myWriter.write(fileContent);
				        		  myWriter.flush();
				        		 } catch(IOException e) {
				        			 System.out.println("An error occurred when writing to the file. " + e.getMessage());
				        		 }
							
						} catch (FileNotFoundException e) {
							System.out.println("An FileNotFound Exception occurred when creating the file. " + e.getMessage());
						}
						
					}
	        	 
	         }
	      }
	   }
}


